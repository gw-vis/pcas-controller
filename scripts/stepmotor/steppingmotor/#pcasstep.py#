#!/usr/bin/env python3

import os
import pcaspy
from . import conf
import logging
from datetime import datetime
import time
from . import userVariableMap

##################################################
def pvdb_dof(i):
    _STEP = '{0}_STEP'.format(i)
    _ACC  = '{0}_ACC'.format(i)
    _VEL = '{0}_VEL'.format(i)
    _STOP = '{0}_STOP'.format(i)
    _POSITION = '{0}_POSITION'.format(i)
    _INTPOSITION = '{0}_INTPOSITION'.format(i)
    _RSWITCH = '{0}_RSWITCH'.format(i)
    _LSWITCH = '{0}_LSWITCH'.format(i)
    _LIMITPOSMIN = '{0}_LIMITPOSMIN'.format(i)
    _LIMITPOSMAX = '{0}_LIMITPOSMAX'.format(i)
    _LIMITCHANGE = '{0}_LIMITCHANGE'.format(i)
    _LRDISTANCE = '{0}_LRDISTANCE'.format(i)
    _LRDISTANCECHANGE = '{0}_LRDISTANCECHANGE'.format(i)
    _POSITIONCHANGE = '{0}_POSITIONCHANGE'.format(i)
    _FLUCTUATION = '{0}_FLUCTUATION'.format(i)
    _FWD = '{0}_FWD'.format(i)
    _REV = '{0}_REV'.format(i)
    _LOAD = '{0}_LOAD'.format(i)
    _RESOLUTION = '{0}_RESOLUTION'.format(i)
    _INIT = '{0}_INIT'.format(i)
    _UPDATE = '{0}_UPDATE'.format(i)
    _ERROR = '{0}_ERROR'.format(i)
    
    pvdb = {
        _STEP: {
            'desc': "move pico motor forward",
            'prec': 0,
            'value': 0,
        },
        _ACC: {
            'desc': "move pico motor forward",
            'prec': 0,
            'value': 10,
        },
        _VEL: {
            'desc': "move pico motor forward",
            'prec': 0,
            'value': 10,
        },
        _STOP: {
            'desc': "move pico motor forward",
            'prec': 0,
            'value': 0,
        },
        _POSITION: {
            'desc': "move pico motor forward",
            'prec': 0,
            'value': 0,
        },
        _INTPOSITION: {
            'desc': "move pico motor forward",
            'prec': 0,
            'value': 0,
        },
        _RSWITCH: {
            'desc': "move pico motor forward",
            'prec': 0,
            'value': 0,
        },
        _LSWITCH: {
            'desc': "move pico motor forward",
            'prec': 0,
            'value': 0,
        },
        _LIMITPOSMIN: {
            'desc': "move pico motor forward",
            'prec': 0,
            'value': 0,
        },
        _LIMITPOSMAX: {
            'desc': "move pico motor forward",
            'prec': 0,
            'value': 0,
        },
        _LIMITCHANGE: {
            'desc': "move pico motor forward",
            'prec': 0,
            'value': 0,
        },
        _LRDISTANCE: {
            'desc': "move pico motor forward",
            'prec': 0,
            'value': 0,
        },
        _LRDISTANCECHANGE: {
            'desc': "move pico motor forward",
            'prec': 0,
            'value': 0,
        },
        _POSITIONCHANGE: {
            'desc': "move pico motor forward",
            'prec': 0,
            'value': 0,
        },
        _FLUCTUATION: {
            'desc': "move pico motor forward",
            'prec': 0,
            'value': 0,
        },
        _FWD: {
            'desc': "move pico motor forward",
            'prec': 0,
            'value': 0,
        },
        _REV: {
            'desc': "move pico motor forward",
            'prec': 0,
            'value': 0,
        },
        _LOAD: {
            'desc': "move pico motor forward",
            'prec': 0,
            'value': 0,
        },
        _RESOLUTION: {
            'desc': "move pico motor forward",
            'prec': 0,
            'value': 8,
        },
        _INIT: {
            'desc': "move pico motor forward",
            'prec': 0,
            'value': 0,
        },
        _UPDATE: {
            'desc': "move pico motor forward",
            'prec': 0,
            'value': 0,
        },
        _ERROR: {
            'desc': "move pico motor forward",
            'prec': 0,
            'value': 0,
        },
    }
    return pvdb

pvdb = pvdb_dof(0)
pvdb.update(pvdb_dof(1))
pvdb.update(pvdb_dof(2))
pvdb.update(pvdb_dof(3))
pvdb.update(pvdb_dof(4))
pvdb.update(pvdb_dof(5))

##################################################

#os.environ['EPICS_CAS_INTF_ADDR_LIST'] = 'localhost'
#os.environ['EPICS_CAS_SERVER_PORT'] = '58901'

# https://pcaspy.readthedocs.org/en/latest/tutorial.html

class PcasDriver(pcaspy.Driver):
    def __init__(self, driver, prefix):
        super(PcasDriver, self).__init__()
        self.driver = driver
        self.conf = conf
        self.prefix = prefix
        a, sus = prefix.split("-")
        self.part = sus[:-1]

        self.driver.setTargetSpeed(10, 0)
        self.driver.setAcceleration(10,0)
        self.driver.setTargetSpeed(10, 1)
        self.driver.setAcceleration(10,1)
        self.driver.setTargetSpeed(10, 2)
        self.driver.setAcceleration(10,2)
        self.driver.setTargetSpeed(10, 3)
        self.driver.setAcceleration(10,3)
        self.driver.setTargetSpeed(10, 4)
        self.driver.setAcceleration(10,4)
        self.driver.setTargetSpeed(10, 5)
        self.driver.setAcceleration(10,5)

        self.logfile = '/kagra/Dropbox/Subsystems/VIS/Scripts/StepMotor/LogFiles/'+self.prefix+'.log'
        self.intfile = '/kagra/Dropbox/Subsystems/VIS/Scripts/StepMotor/LogFiles/int'+self.prefix+'.log'

        # setup limit and position from TMCM6100 mempry.
        for motorAddr in range(6):
            limitMax = self.driver.getUserVariables(self.calcUserValiable(motorAddr,userVariableMap.limitMax))
            self.setParam(str(motorAddr)+"_LIMITPOSMAX",limitMax)
            limitMin = self.driver.getUserVariables(self.calcUserValiable(motorAddr,userVariableMap.limitMin))
            self.setParam(str(motorAddr)+"_LIMITPOSMIN",limitMin)
            pos = self.driver.getUserVariables(self.calcUserValiable(motorAddr,userVariableMap.actualPos))
            self.setParam(str(motorAddr)+"_POSITION",pos)
            self.driver.stop(motorAddr)
            self.driver.setActualPosition(pos, motorAddr)
            lrDistance = self.driver.getUserVariables(self.calcUserValiable(motorAddr,userVariableMap.lrDistance))
            self.setParam(str(motorAddr)+"_LRDISTANCE",lrDistance)
            if lrDistance == 0:
                self.driver.setRightLimitSwitchEnable(False, motorAddr)
                self.driver.setLeftLimitSwitchEnable(False,  motorAddr)
            else:
                self.driver.setRightLimitSwitchEnable(True, motorAddr)
                self.driver.setLeftLimitSwitchEnable(True,  motorAddr)

            d = datetime.now()
            with open(self.logfile,'a') as f:
                f.write(d.strftime('%Y-%m-%d %H:%M:%S')+' motor'+str(motorAddr)+' initialize actual position:'+str(pos)+' limit : '+str(limitMax)+' , '+str(limitMin)+' Distance: '+str(lrDistance)+'\n')

            resolution = self.driver.getMicrostepResolution(motorAddr)
            self.setParam(str(motorAddr)+"_RESOLUTION",resolution)

            load = self.driver.getActualMotorLoad(motorAddr)
            self.setParam(str(motorAddr)+"_LOAD",load)
            
        self.updatePVs()

    def read(self, channel):
        value = self.getParam(channel)
        print('%s => %s' % (channel, value))
        self.setParam(channel, value) # need !
        direction,name = channel.split("_")
        motorAddr = int(direction)
        if motorAddr < 0 or motorAddr > 5:
            print("Error motor Addr:",motorAddr)
        if name == "RSWITCH":
            value = self.driver.getRightLimitSwitch(motorAddr)
            self.setParam(direction+"_RSWITCH",value)
            self.updatePVs()
            print('%s => %d' % (channel, value))
        elif name == "LSWITCH":
            value = self.driver.getLeftLimitSwitch(motorAddr)
            self.setParam(direction+"_LSWITCH",value)
            self.updatePVs()
            print('%s => %d' % (channel, value))
        elif name == "LOAD":
            load = self.driver.getActualMotorLoad(motorAddr)
            self.setParam(str(motorAddr)+"_LOAD",load)

        return value

    def write(self, channel, value):
        print('%s => %s' % (channel, value))
        self.setParam(channel, value) # need !
        direction,name = channel.split("_")
        motorAddr = int(direction)
        if motorAddr < 0 or motorAddr > 5:
            print("Error motor Addr:",motorAddr)
        #        with self.driver:
        if (name == "UPDATE") and (value == 1.0):
            #self.driver.reconnect()
            
            pos = self.driver.getActualPosition(motorAddr)
            if pos == 0:
                # Maybe after the power off. Read to EEPROM.
                pos = self.driver.getUserVariables(self.calcUserValiable(motorAddr,userVariableMap.actualPos))
            self.setParam(direction+"_POSITION",pos)

            d = datetime.now()
            with open(self.logfile,'a') as f:
                 f.write(d.strftime('%Y-%m-%d %H:%M:%S')+' motor'+str(motorAddr)+' position updated as '+str(pos)+'\n')

            value = self.driver.getRightLimitSwitch(motorAddr)
            self.setParam(direction+"_RSWITCH",value)
            value = self.driver.getLeftLimitSwitch(motorAddr)
            self.setParam(direction+"_LSWITCH",value)
            load = self.driver.getActualMotorLoad(motorAddr)
            self.setParam(direction+"_LOAD",load)

        if name == "ACC":
            acc = self.getParam(direction+"_ACC")
            self.driver.setAcceleration(acc, motorAddr)

            d = datetime.now()
            with open(self.logfile,'a') as f:
                f.write(d.strftime('%Y-%m-%d %H:%M:%S')+' motor'+str(motorAddr)+' acc as '+str(acc)+'\n')

        if name == "VEL":
            vel = self.getParam(direction+"_VEL")
            self.driver.setTargetSpeed(vel, motorAddr)

            d = datetime.now()
            with open(self.logfile,'a') as f:
                f.write(d.strftime('%Y-%m-%d %H:%M:%S')+' motor'+str(motorAddr)+' vel as '+str(vel)+'\n')

        if (name == "STOP") and (value == 1.0):
            self.driver.stop(motorAddr)
## added 2019/08/06 ##
            pos =  self.driver.getActualPosition(motorAddr)
            self.setParam(direction+"_POSITION",pos)
####
            d = datetime.now()
            with open(self.logfile,'a') as f:
                 f.write(d.strftime('%Y-%m-%d %H:%M:%S')+' motor'+str(motorAddr)+' position stoped as '+str(pos)+'\n')

            self.driver.setUserVariables(self.calcUserValiable(motorAddr,userVariableMap.actualPos),pos)
            self.driver.storeUserVariables(self.calcUserValiable(motorAddr,userVariableMap.actualPos))

        if name == "STEP":
            count = self.getParam(direction+"_STEP")
            self.moveStepCount(motorAddr,direction,count)

        if (name == "FWD") and (value == 1.0):
            count = self.getParam(direction+"_FLUCTUATION")
            self.moveStepCount(motorAddr,direction,count)

        if (name == "REV") and (value == 1.0):
            count = -self.getParam(direction+"_FLUCTUATION")
            self.moveStepCount(motorAddr,direction,count)

        if (name == "LIMITCHANGE") and (value == 1.0):
            limitMin = self.getParam(direction+"_LIMITPOSMIN")
            limitMax = self.getParam(direction+"_LIMITPOSMAX")

            oldlimitMax = self.driver.getUserVariables(self.calcUserValiable(motorAddr,userVariableMap.limitMax))
            oldlimitMin = self.driver.getUserVariables(self.calcUserValiable(motorAddr,userVariableMap.limitMin))

            d = datetime.now()
            with open(self.logfile,'a') as f:
                f.write(d.strftime('%Y-%m-%d %H:%M:%S')+' motor'+str(motorAddr)+' limit change to '+str(limitMin)+' , '+str(limitMax)+' from '+str(oldlimitMin)+' , '+str(oldlimitMax)+'\n')            

            # limitMin and limitMax position.
            self.driver.setUserVariables(self.calcUserValiable(motorAddr,userVariableMap.limitMin),qlimitMin)
            self.driver.setUserVariables(self.calcUserValiable(motorAddr,userVariableMap.limitMax),limitMax)
            # Store all paranator to EEPROM.
            print("[Start]Store TMCM6110 EEPROM")
            self.driver.storeUserVariables(self.calcUserValiable(motorAddr,userVariableMap.limitMin))
            self.driver.storeUserVariables(self.calcUserValiable(motorAddr,userVariableMap.limitMax))
            print("[End]Store TMCM6110 EEPROM")

        if (name == "LRDISTANCECHANGE") and (value == 1.0):
            lrDistance = self.getParam(str(motorAddr)+"_LRDISTANCE")
            if lrDistance == 0:
                self.driver.setRightLimitSwitchEnable(False, motorAddr)
                self.driver.setLeftLimitSwitchEnable(False,  motorAddr)
            else:
                self.driver.setRightLimitSwitchEnable(True, motorAddr)
                self.driver.setLeftLimitSwitchEnable(True,  motorAddr)
            oldlrDistance = self.driver.getUserVariables(self.calcUserValiable(motorAddr,userVariableMap.lrDistance))

            d = datetime.now()
            with open(self.logfile,'a') as f:
                f.write(d.strftime('%Y-%m-%d %H:%M:%S')+' motor'+str(motorAddr)+' lrdistance change to '+str(lrDistance)+' from '+str(oldlrDistance)+'\n')            

            # limitMin and limitMax position.
            self.driver.setUserVariables(self.calcUserValiable(motorAddr,userVariableMap.lrDistance),int(lrDistance))
            # Store all paranator to EEPROM.
            print("[Start]Store TMCM6110 EEPROM")
            self.driver.storeUserVariables(self.calcUserValiable(motorAddr,userVariableMap.lrDistance))
            print("[End]Store TMCM6110 EEPROM")

        if (name == "POSITIONCHANGE") and (value == 1.0):
            pos = self.getParam(direction+"_POSITION")
            self.driver.stop(motorAddr)
            self.driver.setActualPosition(pos, motorAddr)
            oldpos = self.driver.getUserVariables(self.calcUserValiable(motorAddr,userVariableMap.actualPos))

            d = datetime.now()
            with open(self.logfile,'a') as f:
                f.write(d.strftime('%Y-%m-%d %H:%M:%S')+' motor'+str(motorAddr)+' Position change to '+str(pos)+' from '+str(oldpos)+'\n')            

            # limitMin and limitMax position.
            self.driver.setUserVariables(self.calcUserValiable(motorAddr,userVariableMap.actualPos),pos)
            # Store all paranator to EEPROM.
            print("[Start]Store TMCM6110 EEPROM")
            self.driver.storeUserVariables(self.calcUserValiable(motorAddr,userVariableMap.actualPos))
            print("[End]Store TMCM6110 EEPROM")
        
        if (name == "RESOLUTION") and (value >= 0.0):
            resolution = self.getParam(direction+"_RESOLUTION")
            load = self.driver.setMicrostepResolution(resolution,motorAddr)

            d = datetime.now()
            with open(self.logfile,'a') as f:
                f.write(d.strftime('%Y-%m-%d %H:%M:%S')+' motor'+str(motorAddr)+' resolution as '+str(resolution)+'\n')

        self.updatePVs()
            
        return True

    def moveStepCount(self,motorAddr,direction,count):
        pos =  self.driver.getActualPosition(motorAddr)
        axisDirection = self.conf.channel[self.part]["axisDirection"][motorAddr]
        min = self.getParam(direction+"_LIMITPOSMIN")
        max = self.getParam(direction+"_LIMITPOSMAX")
        count = self.calcMoveRange(max,min,pos,axisDirection*count)

        self.driver.setTargetPosition(pos+count, motorAddr)
        d = datetime.now()
        with open(self.logfile,'a') as f:
            f.write(d.strftime('%Y-%m-%d %H:%M:%S')+' motor'+str(motorAddr)+' moved to '+str(pos+count)+' from '+str(pos)+'\n')            

        # Actual position.
        self.driver.setUserVariables(self.calcUserValiable(motorAddr,userVariableMap.actualPos),int(pos+count))
        self.driver.storeUserVariables(self.calcUserValiable(motorAddr,userVariableMap.actualPos))

    def calcUserValiable(self,motorAddr,offset):
        # CH.0 to 5
        number = motorAddr + offset * 6
        # EEPROM to #56.
        if number > 55:
            print("[Error] Over maximum number in EEPROM.", number)
        return motorAddr + offset * 6

    def calcMoveRange(self,max,min,pos,count):
        if min == 0 and max == 0:
            #count = 0
            pass
        else:
            if count > 0 and max < pos + count:
                count = max - pos
            if count < 0 and min > pos + count:
                count = min - pos
        return count

class PcasServer(pcaspy.SimpleServer):
    def __init__(self, prefix, driver):
        super(PcasServer, self).__init__()
        logging.info("initializing server...")
        self.server = pcaspy.SimpleServer()
        self.server.createPV(prefix, pvdb)
        driver = PcasDriver(driver,prefix)
        
    def run(self):
        logging.info("Starting server...")
        while True:
            self.server.process(0.1)
